#-*- coding: utf-8 -*-

from re import M
import keyboards

from data.config import SUPPORT_CHANNEL_ID 
from aiogram import types
from keyboards import reply
from statesgroup import InvestProduct, Payment, Support, Wallet
from aiogram.dispatcher import FSMContext
from database import users_api, support_api


def setup(dp, bot):
    @dp.message_handler(state=Payment.payment_amount)
    async def payment_amount(message: types.Message, state: FSMContext):
        if "–ù–∞–∑–∞–¥" in message.text:
            await state.finish()
            await message.answer(
                text="üóÉ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.",
                reply_markup=keyboards.reply.main_menu(),
            )
            return

        try:
            amount = float(message.text)
        except ValueError:
            await message.answer(
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 500.00 RUB"
            )   
            return

        await state.update_data(amount=amount)

        msg = "üìå <b>–ü–û–†–Ø–î–û–ö –î–ï–ô–°–¢–í–ò–ô –î–õ–Ø –°–û–í–ï–†–®–ï–ù–ò–Ø –û–ë–ú–ï–ù–ê:</b>\n\n" + \
            "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç <a href=''>–°–±–µ—Ä–±–∞–Ω–∫ –æ–Ω–ª–∞–π–Ω</a>" + \
                " / <a href=''>–¢–∏–Ω—å–∫–æ—Ñ—Ñ –æ–Ω–ª–∞–π–Ω</a>" + \
                " –∏ –≤–æ–π–¥–∏—Ç–µ –≤ –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n" + \
            "2Ô∏è‚É£ –°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É <b>500.00 RUB</b>, " + \
                "—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 1 –∫–æ–ø–µ–π–∫–∏.\n" + \
            "3Ô∏è‚É£ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞  - 4800123412341234.\n" + \
            "4Ô∏è‚É£ –§.–ò.–û. –ø–æ–ª—É—á–∞—Ç–µ–ª—è -  –ë –ï–í–ì–ï–ù–ò–ô –í–õ–ê–î–ò–ú–ò–†–û–í–ò–ß.\n" + \
            "5Ô∏è‚É£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫  –ø–µ—Ä–µ–≤–æ–¥—É -  –ú–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω +79112223333.\n\n" + \
            "‚ùóÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ ¬´–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É / —Å–æ–æ–±—â–µ–Ω–∏–µ " + \
                "–ø–æ–ª—É—á–∞—Ç–µ–ª—é¬ª, –∞ –∏–º–µ–Ω–Ω–æ: <b>¬´–ú–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω +79112223333¬ª</b>. " + \
                "–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—É–¥–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.\n\n" + \
            "‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ <b>¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª</b>, —á—Ç–æ–±—ã " + \
                "–º—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤."
        await message.answer(
            text=msg,
            reply_markup=keyboards.reply.check_bill(),
        )
        
        await Payment.payment_check.set()
    
    @dp.message_handler(state=Wallet.set_wallet)
    async def set_wallet(message: types.Message, state: FSMContext):
        if message.text[0] != "U" and message.text[0] != "u":
            msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞." + \
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è" 
            await message.answer(
                text=msg,
            )
            await state.finish()
            return
        
        await users_api.set_wallet(
            user_id=message.from_user.id,
            wallet=message.text,
        )

        await state.finish()
        await message.answer(
            text="‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.",
        )
    
    @dp.message_handler(state=InvestProduct.set_invest_amount)
    async def set_invest_amount(message: types.Message, state: FSMContext):
        if "–ù–∞–∑–∞–¥" in message.text:
            await state.finish()
            await message.answer(
                text="üóÉ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.",
                reply_markup=keyboards.reply.main_menu(),
            )
            return

        try:
            amount = float(message.text)
        except ValueError:
            await message.answer(
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä",
            )
            return
        
        if amount < 1000:
            await message.answer(
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∫—Ä–∞—Ç–Ω–æ–µ –æ—Ç $1000",
            )
            return
        
        user = await users_api.get_user(message.from_user.id)
        if user.ballance < amount:
            await message.answer(
                text="‚ö†Ô∏è –û—à–∏–±–∫–∞: –°—É–º–º—ã –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ",
            )
            return
        
        async with state.proxy() as data:
            data['amount'] = amount

        await InvestProduct.confirm_purchase.set()
        await message.answer(
            text="–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?",
            reply_markup=keyboards.reply.confirm_purchase(),
        )

    @dp.message_handler(state=Support.quest_full)
    async def quest_full(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            quest_type = data['quest_type']
        
        corres = await support_api.create_corres(
            user_id=message.from_user.id,
            quest_type=quest_type,
            quest_full=message.text,
            msg_id=message
        )

        await Support.corres.set()
        async with state.proxy() as data:
            data['corres_id'] = corres.id
        
        msg = f"üóÉ –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Äî {corres.id}. " + \
                "–û–ø–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –≤–∞–º."
        await message.answer(
            text=msg,
            reply_markup=keyboards.reply.back_to_menu(),
        )

        msg = f"üí¨ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç <code>{message.from_user.username}</code>\n" + \
            f"‚ÑπÔ∏è –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {corres.quest_type}\n\n" + \
            f"–ü–æ–ª–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {corres.quest_full}"
        msg = await bot.send_message(
            chat_id=SUPPORT_CHANNEL_ID,
            text=msg,
            reply_markup=keyboards.inline.answer(corres.id),
        )

        await support_api.set_msg_id(corres.id, msg.message_id)
        
    @dp.message_handler(state=Support.corres)
    async def corres(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            corres_id = data['corres_id']

        corres = await support_api.get_corres(corres_id)
        
        if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":
            if message.from_user.id == corres.user_id:
                companion_id = corres.support_id
            else:
                companion_id = corres.user_id

            await bot.send_message(
                chat_id=companion_id,
                text=f"<code>{message.from_user.username}</code> –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç",
                reply_markup=keyboards.reply.main_menu(),
            )

            await bot.send_message(
                chat_id=message.from_user.id,
                text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç",
                reply_markup=keyboards.reply.main_menu(),
            )

            await bot.edit_message_text(
                chat_id=SUPPORT_CHANNEL_ID,
                message_id=corres.msg_id,
                text="‚ÑπÔ∏è –í–æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω",
            )
            await state.finish()
            await dp.current_state(chat=companion_id, user=companion_id).finish()
            return
            
        if corres.user_id == message.from_user.id:
            await bot.send_message(
                chat_id=corres.support_id,
                text=message.text,
            )
        
        if corres.support_id == message.from_user.id:
            await bot.send_message(
                chat_id=corres.user_id,
                text=message.text,
            )