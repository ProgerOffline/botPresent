#-*- coding: utf-8 -*-

from aiogram import types
from database import users_api, payments_api, settings_api, outs_api
from aiogram.dispatcher import filters
from aiogram.dispatcher import FSMContext
from statesgroup import Payment, Support, Wallet, InvestProduct, OutMoney
from utils.perfectmoney import PerfectMoney
from pycbrf import ExchangeRates
from bot import bot

import keyboards


def setup(dp):
    @dp.message_handler(filters.Text(contains="–ù–∞–∑–∞–¥"), state="*")
    async def back(message: types.Message, state: FSMContext):
        await state.finish()
        await message.answer(
            text="üóÉ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.",
            reply_markup=keyboards.reply.main_menu(),
        )

    @dp.message_handler(filters.Text(contains="–ú–æ–π –ë–∞–ª–∞–Ω—Å"))
    async def ballance(message: types.Message):
        user = await users_api.get_user(message.from_user.id)
        ballance = float('{:.3f}'.format(user.ballance))
        await message.answer(
            text=f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {ballance} RUB",
        )

    @dp.message_handler(filters.Text(contains="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    async def fill_ballance(message: types.Message):
        await message.answer(
            text="‚öñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
            reply_markup=keyboards.reply.fill_ballance(),
        )

    @dp.message_handler(filters.Text(contains="–°–±–µ—Ä–±–∞–Ω–∫"))
    @dp.message_handler(filters.Text(contains="–¢–∏–Ω—å–∫–æ—Ñ—Ñ"))
    async def payment_type(message: types.Message, state: FSMContext):
        await Payment.payment_amount.set()
        
        await state.update_data(bank=message.text)
        await message.answer(
            text="üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB",
            reply_markup=keyboards.reply.back_to_menu(),
        )

    @dp.message_handler(
        filters.Text(contains="–Ø –æ–ø–ª–∞—Ç–∏–ª"), state=Payment.payment_check)
    async def check_bill(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            amount = data['amount']
            payment_id = data['payment_id']

        payment = await payments_api.get_payment(payment_id)
        await payments_api.set_status(payment_id, "Pending")

        await message.answer(
            text="‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –í–∞—à " + \
                "–±–∞–ª–∞–Ω—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
            reply_markup=keyboards.reply.main_menu(),
        )
        await state.finish()

    @dp.message_handler(filters.Text(contains="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"))
    async def ref_link(message: types.Message):
        user = await users_api.get_user(message.from_user.id)
        if user.invest_amount > 0:
            msg = "üîó –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–æ–≤–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É: " + \
                f"https://t.me/crypto_e_bot?start=referer_{user.id}"
        else:
            msg = "‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ " + \
                "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç."

        await message.answer(
            text=msg,
            reply_markup=keyboards.reply.main_menu(),
        )

    @dp.message_handler(filters.Text(contains="–ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"))
    async def my_investments(message: types.Message):
        user = await users_api.get_user(message.from_user.id)

        if user.invest_amount <= 0:
            msg = "üíµ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else:
            msg = f"üíµ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {user.invest_amount} RUB"

        await message.answer(
            text=msg,
        )

    @dp.message_handler(filters.Text(contains="–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞"))
    async def wallet_out(message: types.Message):
        msg = \
            "üí≤ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–ª–ª–∞—Ä–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã " + \
            "Perfect Money.\n" + \
            "–ü—Ä–∏–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: U1234567\n" + \
            "üìå –ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ Perfect Money " + \
            "–º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –¥–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–µ: " + \
            "<a href='https://telegra.ph/Registraciya-scheta-v-Perfect-Money-01-20'>‚úÖ –ß–∏—Ç–∞—Ç—å</a>"

        await Wallet.set_wallet.set()
        await message.answer(
            text=msg,
            reply_markup=keyboards.reply.back_to_menu(),
        )

    @dp.message_handler(filters.Text(contains="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"))
    async def invest_product(message: types.Message):
        msg = "–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –î–û–•–û–î–ù–û–°–¢–¨ 5-10%\n" + \
            "‚ñ™Ô∏è –î–µ–ø–æ–∑–∏—Ç –æ—Ç 1000 RUB.\n" + \
            "‚ñ™Ô∏è–í–≤–æ–¥ –°–±–µ—Ä–±–∞–Ω–∫ / –¢–∏–Ω—å–∫–æ—Ñ—Ñ  –∏ –≤—ã–≤–æ–¥ Perfect Money.\n" + \
            "‚ñ™Ô∏è–í—ã–≤–æ–¥ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n" + \
            "‚ñ™Ô∏è–°—Ä–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n" + \
            "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ RUB"
    
        await InvestProduct.set_invest_amount.set()
        await message.answer(
            text=msg,
            reply_markup=keyboards.reply.back_to_menu(),
        )
    
    @dp.message_handler(
        filters.Text(contains="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É"), 
        state=InvestProduct.confirm_purchase)
    async def confirm_purchase(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            amount = data['amount']

        user = await users_api.get_user(message.from_user.id)
        await users_api.set_invest_time(user.user_id)

        # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ amount
        ballance = user.ballance - amount
        await users_api.set_ballance(message.from_user.id, ballance)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ amount
        invest_amount = user.invest_amount + amount
        await users_api.set_invest_amount(message.from_user.id, invest_amount)
        
        # –ü—Ä–∏—Å—ã–ª–∞–µ–º —Ä–µ—Ñ. –ø—Ä–æ—Ü–µ–Ω—Ç –∫ –∞—Ñ—Ñ–∏–ª–∏–∞–ª—É –æ—Ç 1 —É—Ä–æ–≤–Ω—è –¥–æ 3
        affiliate = await users_api.get_user_db_id(user.affiliate)
        levels = [20, 10, 5]
        for i in range(3):
            try:
                await users_api.set_ballance(
                    user_id=affiliate.user_id, 
                    amount=affiliate.ballance + (amount / 100 * levels[i]),
                )
                await bot.send_message(
                    chat_id=affiliate.user_id,
                    text="‚ÑπÔ∏è –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ " + \
                    f"–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount / 100 * levels[i]} RUB."
                )
            except AttributeError:
                break

            affiliate = await users_api.get_user_db_id(affiliate.affiliate)

        msg = "‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω. " + \
                "–ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ –≤–∞–º –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –¥–∏–≤–∏–¥–µ–Ω–¥—ã."
        await state.finish()
        await message.answer(
            text=msg,
            reply_markup=keyboards.reply.main_menu(),
        )

    @dp.message_handler(
        filters.Text(contains="–ù–∞–∑–∞–¥"), state=InvestProduct.confirm_purchase)
    async def back_outside_check_bill(message: types.Message, state: FSMContext):
        await state.finish()
        await message.answer(
            text="üóÉ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª.",
            reply_markup=keyboards.reply.main_menu(),
        )
    
    @dp.message_handler(filters.Text(contains="–í—ã—Ö–æ–¥"))
    async def logout(message: types.Message):
        in_base = bool(await users_api.get_user(message.from_user.id))

        await message.answer(
            text="üôèüèª –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –í—ã —Å –Ω–∞–º–∏! –ñ–¥–µ–º –í–∞—Å —Å–Ω–æ–≤–∞.",
            reply_markup=keyboards.reply.authorization(in_base),
        )
    
    @dp.message_handler(filters.Text(contains="–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"))
    async def presentation(message: types.Message):
        await message.answer_document(
            document="BQACAgIAAxkBAAOVYe3S6N3f6AunEtp8-F8DtAn1HhsAAjAUAAIUB3FL5oFd5Ch9UjMjBA",
            caption="üìå –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é eCrypto –≤ PDF",
        )
    
    @dp.message_handler(filters.Text(contains="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"))
    async def support(message: types.Message):
        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞",
            reply_markup=keyboards.reply.quest_type(),
        )
    
    @dp.message_handler(filters.Text(contains="–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤"))
    @dp.message_handler(filters.Text(contains="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"))
    @dp.message_handler(filters.Text(contains="–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"))
    @dp.message_handler(filters.Text(contains="–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å"))
    async def quest_type(message : types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['quest_type'] = message.text
        
        await Support.quest_full.set()
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å",
            reply_markup=keyboards.reply.back_to_menu(),
        )
    
    @dp.message_handler(filters.Text(contains="–ü—Ä–æ—Ñ–∏–ª—å"))
    async def profile(message: types.Message):
        user = await users_api.get_user(message.from_user.id)

        wallet = user.wallet if user.wallet != "" else "‚ö†Ô∏è –ü—Ä–∏–≤—è–∂–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫"
        referer = user.affiliate if user.affiliate != 0 else "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è"
        month = user.reg_date.month
        month = month if month >= 10 else f"0{month}"
        day = user.reg_date.day
        day = day if day >= 10 else f"0{day}"
        
        msg = f"–ò–º—è: {message.from_user.first_name}\n" + \
            f"–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}\n" + \
            f"–í–∞—à ID: {user.id}\n" + \
            f"ID –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è: {referer}\n" + \
            f"–ö–æ—à–µ–ª–µ–∫ PM: {wallet}\n" + \
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {day}.{month}.{user.reg_date.year}"
        
        await message.answer(
            text=msg,
        )
    
    @dp.message_handler(filters.Text(contains="–í—ã–≤–æ–¥"))
    async def out_money(message: types.Message):
        await OutMoney.set_amount.set()
        await message.answer(
            text="üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB",
            reply_markup=keyboards.reply.back_to_menu(),
        )
    
    @dp.message_handler(
        filters.Text(contains="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥"), state=OutMoney.confirm_out)
    async def confirm_out(message: types.Message, state: FSMContext):
        user = await users_api.get_user(message.from_user.id)
        async with state.proxy() as data:
            amount = data['amount']
        
        usd_rate = round(ExchangeRates()['USD'].value)
        pay_amount = round(amount / usd_rate, 2)
        
        constants = await settings_api.get_constants()
        pm = PerfectMoney(constants.pm_account, constants.pm_passwd)
        send = pm.spend(constants.wallet_pm, user.wallet, pay_amount)

        if not send:
            text = "‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ."
        else:
            text = "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ " + \
                "–í–∞—à –∫–æ—à–µ–ª–µ–∫ Perfectmoney. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤."
            
            await users_api.set_ballance(user.user_id, user.ballance - amount)

        await message.answer(
            text=text,
            reply_markup=keyboards.reply.main_menu(),
        )
        await outs_api.add_record(user.id, pay_amount, pm.error)
        await state.finish()
